{"version":3,"sources":["components/pie.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PieChart","_ref","data","width","height","radius","Math","min","pie","d3","value","d","count","sort","arc","outerRadius","innerRadius","colors","domain","map","type","text","react_default","a","createElement","transform","concat","i","fill","key","centroid","dy","fontSize","textAnchor","App","req","axios","create","baseURL","_useObject","useObject","result","input","visible","state","setState","fetch","Object","asyncToGenerator","regenerator_default","mark","_callee","user","ress","_res","res","languages","results","wrap","_context","prev","next","get","catch","console","log","sent","abrupt","length","push","flatMap","item","language","forEach","lang","keys","includes","stop","this","_x","apply","arguments","placeholder","onChange","e","target","onClick","style","display","b","maxWidth","maxHeight","react_fit_lib_default","components_pie","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.464904bb.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport * as d3 from \"d3\";\n\nconst PieChart: FunctionComponent<{\n  data?: { type: string; count: number }[];\n  width: number;\n  height: number;\n}> = ({ data, width, height }) => {\n  const radius = Math.min(width, height) / 2;\n\n  const pie = d3\n    .pie()\n    .value((d: any) => d.count)\n    .sort(null);\n\n  const arc = d3\n    .arc()\n    .outerRadius(radius)\n    .innerRadius(0);\n\n  //  カリー化されててキモい\n  const colors = (data: any) =>\n    d3.scaleOrdinal(d3.schemeCategory10).domain(data.map((d: any) => d.type));\n\n  const text = d3\n    .arc()\n    .outerRadius(radius - 50)\n    .innerRadius(radius - 50);\n\n  return (\n    <div>\n      {data && (\n        <svg width={width} height={height}>\n          <g transform={`translate(${width / 2},${height / 2})`}>\n            {pie(data as any).map((d, i) => {\n              return (\n                <path\n                  fill={colors(data)((d.data as any).type)}\n                  d={arc(d as any) as any}\n                  key={i}\n                />\n              );\n            })}\n            {pie(data as any).map((d, i) => (\n              <g\n                transform={`translate(${text.centroid(d as any)})`}\n                dy={5}\n                fontSize={15}\n                textAnchor=\"middle\"\n                key={i}\n              >\n                <text>{(d.data as any).type}</text>\n              </g>\n            ))}\n          </g>\n        </svg>\n      )}\n    </div>\n  );\n};\n\nexport default PieChart;\n","import React, { FunctionComponent, useEffect } from \"react\";\nimport useObject from \"useobject\";\nimport axios from \"axios\";\nimport Fit from \"react-fit\";\nimport PieChart from \"./components/pie\";\n\nconst App: FunctionComponent = () => {\n  const req = axios.create({ baseURL: \"https://api.github.com/users/\" });\n\n  const { state, setState } = useObject({\n    result: [] as { type: string; count: number }[],\n    input: \"\",\n    visible: \"\"\n  });\n\n  const fetch = async (user: string) => {\n    let ress: any[] = [];\n    for (let i = 0; ; i++) {\n      const res = await req\n        .get(user + \"/repos?per_page=100&page=\" + i)\n        .catch(console.log);\n      if (!res) break;\n      if ((res as any).data.length === 0) break;\n      ress.push((res as any).data);\n    }\n    if (ress.length === 0) return;\n    const res = ress.flatMap(item => item);\n\n    const languages = res.flatMap(item => {\n      if (item.language) {\n        return [item.language];\n      } else {\n        return [];\n      }\n    });\n\n    const results: { type: string; count: number }[] = [];\n    const map: { [key: string]: number } = {};\n    languages.forEach(lang => {\n      if (Object.keys(map).includes(lang)) {\n        map[lang]++;\n      } else {\n        map[lang] = 1;\n      }\n    });\n    Object.keys(map).map(key => results.push({ type: key, count: map[key] }));\n    setState({\n      result: results\n    });\n  };\n\n  return (\n    <div>\n      <input\n        placeholder=\"user name\"\n        onChange={e => setState({ input: e.target.value })}\n        value={state.input}\n      />\n      <button\n        onClick={() => {\n          fetch(state.input);\n          setState({ visible: state.input, input: \"\" });\n        }}\n      >\n        show\n      </button>\n      <p style={{ fontSize: 20 }}>{state.visible}</p>\n      {state.result.length > 0 && (\n        <div style={{ display: \"flex\" }}>\n          <div style={{ width: \"20vw\" }}>\n            {state.result\n              .sort((a, b) => b.count - a.count)\n              .map(item => (\n                <p key={item.type}>\n                  {item.type}:{item.count}\n                </p>\n              ))}\n          </div>\n          <div\n            style={{\n              width: \"80vw\",\n              maxWidth: \"80vh\",\n              height: \"80vw\",\n              maxHeight: \"80vh\"\n            }}\n          >\n            <Fit\n              target={(a, b) => (\n                <PieChart data={state.result} width={a} height={b} />\n              )}\n            />\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}