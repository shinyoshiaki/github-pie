{"version":3,"sources":["components/pie.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["PieChart","_ref","data","radius","Math","min","pie","d3","value","d","count","sort","arc","outerRadius","innerRadius","colors","domain","map","type","text","react_default","a","createElement","width","height","transform","concat","i","fill","key","centroid","dy","fontSize","textAnchor","App","req","axios","create","baseURL","_useObject","useObject","result","input","state","setState","fetch","Object","asyncToGenerator","regenerator_default","mark","_callee","user","ress","_res","res","languages","results","wrap","_context","prev","next","get","catch","console","log","sent","length","abrupt","push","flatMap","item","language","forEach","lang","keys","includes","stop","this","_x","apply","arguments","placeholder","onChange","e","target","onClick","style","display","b","components_pie","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0OA6DeA,EAxDV,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAGAC,EAASC,KAAKC,IAFN,IACC,KAC0B,EAEnCC,EAAMC,MAETC,MAAM,SAACC,GAAD,OAAYA,EAAEC,QACpBC,KAAK,MAEFC,EAAML,MAETM,YAAYV,GACZW,YAAY,GAGTC,EAAS,SAACb,GAAD,OACbK,IAAgBA,KAAqBS,OAAOd,EAAKe,IAAI,SAACR,GAAD,OAAYA,EAAES,SAE/DC,EAAOZ,MAEVM,YAAYV,EAAS,IACrBW,YAAYX,EAAS,IAExB,OACEiB,EAAAC,EAAAC,cAAA,WACGpB,GACCkB,EAAAC,EAAAC,cAAA,OAAKC,MA1BG,IA0BWC,OAzBV,KA0BPJ,EAAAC,EAAAC,cAAA,KAAGG,UAAS,aAAAC,OAAeH,IAAf,KAAAG,OAA4BF,IAA5B,MACTlB,EAAIJ,GAAae,IAAI,SAACR,EAAGkB,GACxB,OACEP,EAAAC,EAAAC,cAAA,QACEM,KAAMb,EAAOb,EAAPa,CAAcN,EAAEP,KAAagB,MACnCT,EAAGG,EAAIH,GACPoB,IAAKF,MAIVrB,EAAIJ,GAAae,IAAI,SAACR,EAAGkB,GAAJ,OACpBP,EAAAC,EAAAC,cAAA,KACEG,UAAS,aAAAC,OAAeP,EAAKW,SAASrB,GAA7B,KACTsB,GAAI,EACJC,SAAU,GACVC,WAAW,SACXJ,IAAKF,GAELP,EAAAC,EAAAC,cAAA,YAAQb,EAAEP,KAAagB,aCgCxBgB,EA9EgB,WAC7B,IAAMC,EAAMC,IAAMC,OAAO,CAAEC,QAAS,kCADDC,EAGPC,IAAU,CACpCC,OAAQ,GACRC,MAAO,KAFDC,EAH2BJ,EAG3BI,MAAOC,EAHoBL,EAGpBK,SAKTC,EAAK,eAAA5C,EAAA6C,OAAAC,EAAA,EAAAD,CAAAE,EAAA3B,EAAA4B,KAAG,SAAAC,EAAOC,GAAP,IAAAC,EAAAzB,EAAA0B,EAAAC,EAAAC,EAAAC,EAAAvC,EAAA,OAAA+B,EAAA3B,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACRR,EAAc,GACTzB,EAAI,EAFD,cAAA+B,EAAAE,KAAA,EAGQzB,EACf0B,IAAIV,EAAO,4BAA8BxB,GACzCmC,MAAMC,QAAQC,KALP,UAMuB,KAH3BV,EAHII,EAAAO,MAMO/D,KAAKgE,OANZ,CAAAR,EAAAE,KAAA,eAAAF,EAAAS,OAAA,sBAOLb,EAPK,CAAAI,EAAAE,KAAA,eAAAF,EAAAS,OAAA,mBAQVf,EAAKgB,KAAMd,EAAYpD,MARb,QAEMyB,IAFN+B,EAAAE,KAAA,mBAUNN,EAAMF,EAAKiB,QAAQ,SAAAC,GAAI,OAAIA,IACjCP,QAAQC,IAAI,CAAEV,QACK,IAAfA,EAAIY,OAZI,CAAAR,EAAAE,KAAA,gBAAAF,EAAAS,OAAA,kBAcNZ,EAAYD,EAAIe,QAAQ,SAAAC,GAC5B,OAAIA,EAAKC,SACA,CAACD,EAAKC,UAEN,KAILf,EAA6C,GAC7CvC,EAAiC,GACvCsC,EAAUiB,QAAQ,SAAAC,GACZ3B,OAAO4B,KAAKzD,GAAK0D,SAASF,GAC5BxD,EAAIwD,KAEJxD,EAAIwD,GAAQ,IAGhB3B,OAAO4B,KAAKzD,GAAKA,IAAI,SAAAY,GAAG,OAAI2B,EAAQY,KAAK,CAAElD,KAAMW,EAAKnB,MAAOO,EAAIY,OACjEe,EAAS,CACPH,OAAQe,IAjCE,yBAAAE,EAAAkB,SAAA1B,EAAA2B,SAAH,gBAAAC,GAAA,OAAA7E,EAAA8E,MAAAF,KAAAG,YAAA,GAqCX,OACE5D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACE2D,YAAY,YACZC,SAAU,SAAAC,GAAC,OAAIvC,EAAS,CAAEF,MAAOyC,EAAEC,OAAO5E,SAC1CA,MAAOmC,EAAMD,QAEftB,EAAAC,EAAAC,cAAA,UACE+D,QAAS,WACPxC,EAAMF,EAAMD,OACZE,EAAS,CAAEF,MAAO,OAHtB,QAQCC,EAAMF,OAAOyB,OAAS,GACrB9C,EAAAC,EAAAC,cAAA,OAAKgE,MAAO,CAAEC,QAAS,SACrBnE,EAAAC,EAAAC,cAAA,WACGqB,EAAMF,OACJ9B,KAAK,SAACU,EAAGmE,GAAJ,OAAUA,EAAE9E,MAAQW,EAAEX,QAC3BO,IAAI,SAAAqD,GAAI,OACPlD,EAAAC,EAAAC,cAAA,KAAGO,IAAKyC,EAAKpD,MACVoD,EAAKpD,KADR,IACeoD,EAAK5D,UAI1BU,EAAAC,EAAAC,cAACmE,EAAD,CAAUvF,KAAMyC,EAAMF,YChEZiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAASC,SAASC,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.934e0ad9.chunk.js","sourcesContent":["import React, { FunctionComponent } from \"react\";\nimport * as d3 from \"d3\";\n\nconst PieChart: FunctionComponent<{\n  data?: { type: string; count: number }[];\n}> = ({ data }) => {\n  const width = 500;\n  const height = 500;\n  const radius = Math.min(width, height) / 2;\n\n  const pie = d3\n    .pie()\n    .value((d: any) => d.count)\n    .sort(null);\n\n  const arc = d3\n    .arc()\n    .outerRadius(radius)\n    .innerRadius(0);\n\n  //  カリー化されててキモい\n  const colors = (data: any) =>\n    d3.scaleOrdinal(d3.schemeCategory10).domain(data.map((d: any) => d.type));\n\n  const text = d3\n    .arc()\n    .outerRadius(radius - 50)\n    .innerRadius(radius - 50);\n\n  return (\n    <div>\n      {data && (\n        <svg width={width} height={height}>\n          <g transform={`translate(${width / 2},${height / 2})`}>\n            {pie(data as any).map((d, i) => {\n              return (\n                <path\n                  fill={colors(data)((d.data as any).type)}\n                  d={arc(d as any) as any}\n                  key={i}\n                />\n              );\n            })}\n            {pie(data as any).map((d, i) => (\n              <g\n                transform={`translate(${text.centroid(d as any)})`}\n                dy={5}\n                fontSize={15}\n                textAnchor=\"middle\"\n                key={i}\n              >\n                <text>{(d.data as any).type}</text>\n              </g>\n            ))}\n          </g>\n        </svg>\n      )}\n    </div>\n  );\n};\n\nexport default PieChart;\n","import React, { FunctionComponent, useEffect } from \"react\";\nimport useObject from \"useobject\";\nimport axios from \"axios\";\nimport PieChart from \"./components/pie\";\n\nconst App: FunctionComponent = () => {\n  const req = axios.create({ baseURL: \"https://api.github.com/users/\" });\n\n  const { state, setState } = useObject({\n    result: [] as { type: string; count: number }[],\n    input: \"\"\n  });\n\n  const fetch = async (user: string) => {\n    let ress: any[] = [];\n    for (let i = 0; ; i++) {\n      const res = await req\n        .get(user + \"/repos?per_page=100&page=\" + i)\n        .catch(console.log);\n      if ((res as any).data.length === 0) break;\n      if (!res) break;\n      ress.push((res as any).data);\n    }\n    const res = ress.flatMap(item => item);\n    console.log({ res });\n    if (res.length === 0) return;\n\n    const languages = res.flatMap(item => {\n      if (item.language) {\n        return [item.language];\n      } else {\n        return [];\n      }\n    });\n\n    const results: { type: string; count: number }[] = [];\n    const map: { [key: string]: number } = {};\n    languages.forEach(lang => {\n      if (Object.keys(map).includes(lang)) {\n        map[lang]++;\n      } else {\n        map[lang] = 1;\n      }\n    });\n    Object.keys(map).map(key => results.push({ type: key, count: map[key] }));\n    setState({\n      result: results\n    });\n  };\n\n  return (\n    <div>\n      <input\n        placeholder=\"user name\"\n        onChange={e => setState({ input: e.target.value })}\n        value={state.input}\n      />\n      <button\n        onClick={() => {\n          fetch(state.input);\n          setState({ input: \"\" });\n        }}\n      >\n        show\n      </button>\n      {state.result.length > 0 && (\n        <div style={{ display: \"flex\" }}>\n          <div>\n            {state.result\n              .sort((a, b) => b.count - a.count)\n              .map(item => (\n                <p key={item.type}>\n                  {item.type}:{item.count}\n                </p>\n              ))}\n          </div>\n          <PieChart data={state.result} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}